<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.qydata.mapper.UserMapper">

    <resultMap id="User_Map" type="org.qydata.entity.User">
        <result column="email" property="email" />
        <result column="password" property="password" />
        <result column="userStatus" property="status" />
        <association property="customerCompany" javaType="org.qydata.entity.CustomerCompany">
            <result column="companyId" property="id" />
            <result column="companyStatus" property="status" />
        </association>
    </resultMap>

    <!-- 是进行登录认证使用的，即，根据身份信息取得密码进行认证 -->
    <select id="findById" parameterType="String" resultMap="User_Map">
        SELECT a.email,a.password,a.status userStatus,c.companyId,d.status companyStatus
        FROM qycauth.User a
        LEFT JOIN qycauth.UserCustomer b ON a.id=b.userId
        LEFT JOIN qycauth.cbkvwCustomer c ON b.customerId=c.id AND c.typeId=1
        LEFT JOIN qycauth.cbkvwCustomerCompany d ON c.companyId=d.id
        WHERE a.email=#{email}
    </select>
    <!-- 根据用户名查询出该用户对用的所有角色的标记名称（千万不要用中文） -->
    <select id="findAllRoleByUser" parameterType="Integer" resultType="String">
        SELECT flag
        FROM qycauth.Role
        WHERE id IN (
                      SELECT roleId
                      FROM qycauth.UserRole
                      WHERE userId=#{param}
                      )
    </select>
    <!-- 查询出一个用户对应的所有权限数据 -->
    <select id="findAllActionByUser" parameterType="Integer" resultType="String">
        SELECT flag
        FROM qycauth.Action
        WHERE id IN (
                        SELECT actionId
                        FROM qycauth.RoleAction
                        WHERE roleId IN (
                                          SELECT roleId
                                          FROM qycauth.UserRole
                                          WHERE userId=#{param}
                                          )
                      )
    </select>

    <!--添加用户-->
    <insert id="addUser" parameterType="org.qydata.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO qycauth.User(password,email,code,status,businessPrincipal,businessTel,technicalPrincipal,technicalTel,content,createTime)
        VALUES(#{password},#{email},#{code},1,#{businessPrincipal},#{businessTel},#{technicalPrincipal},#{technicalTel},#{content},sysdate())
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    
    <!--根据激活码查找用户-->
    <select id="findUsernameByCode" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT id FROM qycauth.User WHERE code=#{param}
    </select>

    <!--根据激活码查找用户-->
    <select id="findUserByCode" parameterType="java.lang.String" resultType="org.qydata.entity.User">
        SELECT id,email,status,createTime FROM qycauth.User WHERE code=#{param}
    </select>
    
    <!--激活用户-->
    <update id="updateState" parameterType="java.lang.Integer">
        UPDATE qycauth.User SET status=0 WHERE id=#{param}
    </update>

    <!--根据激活码删除未激活的用户-->
    <delete id="deleteUserByCode" parameterType="java.lang.String">
        DELETE FROM qycauth.User WHERE code=#{param}
    </delete>

    <!--用户找回密码-->
    <update id="updatePassword" parameterType="java.lang.String">
        UPDATE qycauth.User SET password=#{param2} WHERE email=#{param1}
    </update>

    <!--根据邮箱查找用户-->
    <select id="queryUserByUsername" parameterType="String" resultType="org.qydata.entity.User">
        SELECT id,email,status,password
        FROM qycauth.User
        WHERE email=#{param}
    </select>

    <!--修改登录密码-->
    <update id="updateLoginPassword" parameterType="String">
        UPDATE qycauth.User SET password=#{param2} WHERE email=#{param1}
    </update>

    <!--分配角色-->
    <insert id="addUserRole" parameterType="Integer" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO qycauth.UserRole(roleId,userId,createTime)
        VALUES(1,#{param},sysdate())
    </insert>

    <!--根据用户Id删除用户-->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        DELETE FROM qycauth.User WHERE id=#{param}
    </delete>

</mapper>